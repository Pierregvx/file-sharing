// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protos/file_transfer.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileTransfer_UploadFile_FullMethodName   = "/filetransfer.FileTransfer/UploadFile"
	FileTransfer_DownloadFile_FullMethodName = "/filetransfer.FileTransfer/DownloadFile"
)

// FileTransferClient is the client API for FileTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransferClient interface {
	UploadFile(ctx context.Context, in *FileData, opts ...grpc.CallOption) (*UploadStatus, error)
	DownloadFile(ctx context.Context, in *FileName, opts ...grpc.CallOption) (*FileDownloadResponse, error)
}

type fileTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransferClient(cc grpc.ClientConnInterface) FileTransferClient {
	return &fileTransferClient{cc}
}

func (c *fileTransferClient) UploadFile(ctx context.Context, in *FileData, opts ...grpc.CallOption) (*UploadStatus, error) {
	out := new(UploadStatus)
	err := c.cc.Invoke(ctx, FileTransfer_UploadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransferClient) DownloadFile(ctx context.Context, in *FileName, opts ...grpc.CallOption) (*FileDownloadResponse, error) {
	out := new(FileDownloadResponse)
	err := c.cc.Invoke(ctx, FileTransfer_DownloadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileTransferServer is the server API for FileTransfer service.
// All implementations must embed UnimplementedFileTransferServer
// for forward compatibility
type FileTransferServer interface {
	UploadFile(context.Context, *FileData) (*UploadStatus, error)
	DownloadFile(context.Context, *FileName) (*FileDownloadResponse, error)
	mustEmbedUnimplementedFileTransferServer()
}

// UnimplementedFileTransferServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransferServer struct {
}

func (UnimplementedFileTransferServer) UploadFile(context.Context, *FileData) (*UploadStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileTransferServer) DownloadFile(context.Context, *FileName) (*FileDownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileTransferServer) mustEmbedUnimplementedFileTransferServer() {}

// UnsafeFileTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransferServer will
// result in compilation errors.
type UnsafeFileTransferServer interface {
	mustEmbedUnimplementedFileTransferServer()
}

func RegisterFileTransferServer(s grpc.ServiceRegistrar, srv FileTransferServer) {
	s.RegisterService(&FileTransfer_ServiceDesc, srv)
}

func _FileTransfer_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransfer_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).UploadFile(ctx, req.(*FileData))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTransfer_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransferServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileTransfer_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransferServer).DownloadFile(ctx, req.(*FileName))
	}
	return interceptor(ctx, in, info, handler)
}

// FileTransfer_ServiceDesc is the grpc.ServiceDesc for FileTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filetransfer.FileTransfer",
	HandlerType: (*FileTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _FileTransfer_UploadFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _FileTransfer_DownloadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/file_transfer.proto",
}
